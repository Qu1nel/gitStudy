Утилита "git config":
    Посмотреть ВСЕ настройки конфига Гита, которые он только найдёт: "git config --list"
    Посмотреть в определённом месте: "git config [--system [--global] [--local]]" 
    Настройка:
        "git config --global" [
                user.name = Имя автора или коммитера.
                user.email = Почта автора или коммитера.
                init.defaultbranch = Имя основной ветки при инициализации репозитория.
                { diff | merge }.tool = Инструменты для работы в Гит.
                alias.[name_of_alias] = Алиас для команд Гит.
            ]

Основные команды Гит:
    "git init [name]" = Инициализирует репозиторий в рабочий каталог или в name.
    "git clone [url] [name]" = Добавляет удалённый репозиторий в рабочий каталог или в 'name'.
    "git status" = Показывает состояние рабочей ветки.
        { -s | --short } = Показывают туже инфу, НО коротко.
    "git add" [content\.\*] = Добавляет некий контент в следующий коммит.
    "git commit" = Делает коммит.
        --amend = Делает коммит-копию, но с изменением.
        "-m ' ... '"= Делает коммит с названием в '...'.
        -v = Добавляет в редактор ВРЕМЕННОЕ состояние того, что добавилось в файлы.
    "git log" = Показывает коммиты сделанные в репозитории в обратном хронологическом порядке.
        "git log [name_branch]" = Покажет коммиты 'name_branch' ветки.
        --all = Покажет вообще ВСЕ коммиты ВСЕХ веток.
        -<N> = Показывает последние N коммитов.
        { -p | --patch } = Показывает разницу между коммитами.
        --stat = Показывает короткую статистику о коммите.
        --graph = Выводит коммиты как древо.
        --pretty=[format_print] = Задает опиции вывода.
            [
                oneline = Выводит каждый коммит на отдельной строке.
                { short | full | fuller } = Выводят инфу о коммитах.
                format:" ... ":
                    %h = сокращенный хеш.
                    %H = Полный хеш.
                    %an = Имя автора.
                    %ae = Почта автора.
                    %cn, %ce = Имя, почта коммитера.
                    %s = Контент коммита.
                    %ad = Дата коммита.
            ]
        --oneline = --pretty=oneline --abbrev-commit
        "-S [word]" = Показывает ВСЕ коммиты где было упоминания 'word'.
    "git push" = Отправляет изменения на удалённый репозиторий.
        { -u | "--set-upstream [name_branch]" } = Ставит ветку 'name_branch' как основную на поток и тд.
    { "git pull" | "git fetch" } = Забирает изменения с удалённого репозитория.
        pull = Автоматически сливает удалённую ветку со своей текущей.
        fetch = Забирает данные в ваш локальный репозиторий, не сливает их.

Второстепенные команды Гит:
    "git branch [name_branch]" = Показывает на какой сейчас ветке мы находимcя. Есть есть 'name_branch' то создасться ветка с таким именем.
        -b = Переключит на созданную ветку 'name_branch'.
        { -m | --move } [old_name] [new_name] = Переименовывает ветку с 'old_name' на 'new_name'.
    "git switch [--options [name_branch]]" = Позволяет переключится на ветку с именем 'name_branch'.
        - = Переключает на предыдущию ветку.
        { -с | --create } = Создать и переключится на ветку 'name_branch'.
    "git mv [from] [to]" = ПРАВИЛЬНО перемещает (переименовывает) файлы в Гит.
    "git rm [file_name]" = Удаляет файл с диска, если с ним ничего не проиходило.
        { -f | --force } = Если с файлом что-то было, то нужно писать -f.
        --cached = Если нужно удалить файл из индекса, НО оставить его.
    "git checkout [options]" = Переключает ветки и тд.

Удалённые команды:
    "git remote" = Показывает список удалённых репозиториев (их имена)
    "git remote add [name] [url]" = Добавляет удалённые репозиторий, ассоциациирует его с 'name'.
    "git remote rm [name]" = Удаляет удалённый репозиторий.
    "git remote rename [old_name] [new_name]" = Переименовывает удалённый репозиторий.
    "git remote show [name]" = Просмотр удалённого репозитория.

Теги:
    "git tag { -l | --list }" = Покажет список всех тегов в репозитории.
    "git tag [tag_name]" = Создаст Легковесный тег (без автора и дополнений) указывающий на текущий коммит.
    "git tag [tag_name] [hash]" = Создаст тег указывающий на коммит 'hash'.
    "git tag -a [tag_name]" = Создаст Аннотированный тег (с сообщением и тд).
    "git show [tag_name]" = Покажет содержимое тега вместе с коммитом.
    "git tag -d [tag_name]" = Удалит тег 'tag_name'.
    "git push <remote> [tag_name]" = Отправит тег на удалённый репозиторий.
    "git push <remote> --tags" = Отправит ВСЕ теги на удалённый репозиторий.
    "git push <remote> --follow-tags" = Отправит ТОЛЬКО АННТОТИРОВАННЫЕ теги на удалённый репозиторий.
    "git push <remote> :refs/tags/[tag_name]" = Удалит тег 'tag_name' на удалённом репозитории.
    "git push <remote> --delete [tag_name]" = Удалит тег 'tag_name' на удалённом репозитории.
    "git checkout [tag_name]" = Переход на коммит с тегмо 'tag_name', но с DETECHED HEAD.

P.S
Добавить некий контент в следующий комит: "git add"

Просмотреть коммиты: "git log"

Сделать коммит: "git commit"

Переместить или переименовать файл: "git mv [old_name] [new_name]"

Удаление из ИНДЕКСА И из ДИРЕКТОРИИ
    Если файл не был затронут: "git rm [file_name]"
    Если файл был затронут (изменён, индексирован): "git rm -f | git rm --force"

Удаление из ИНДЕКСА, НО НЕ из ДИРЕКТОРИИ
    "git rm --cached [file_name]"
    "git reset HEAD [file_name]
    @  "git restore --staged [file_name]"  @

Для отмены ИЗМЕНЕНИЙ, которые НЕ ИНДЕКСИРОВАНЫ
    "git checkout -- [file_name]"
    @  "git restore [file_name]"  @

Для переименовывание веток
    На локальном репозитории: "git branch -m [old_name] [new_name] | git branch --move [old_name] [new_name]"
    Отправить изменённую ветку на удалённый репозиторий: "git push --set-upstream <remote> [name_branch]"
    Удалить ветку на удалённом репозитории: "git push <remote> --delete [name_branch]"

Для того что-бы при клонировании репозитория не было origin: git clone -o [name] <url>


